{"cluster": 7, "subcluster": 11, "abstract_summ": "Almost all CDCL SAT solvers use the 1-UIP clause learning scheme for learning new clauses from conflicts, and our current understanding of SAT solving provides good reasons for using that scheme.The experimental results show that our reproducible parallel SAT solver has comparable performance to non-deterministic parallel SAT solvers even in a many-core environment.We find the 2019 winning SAT solver, Maple_LCM_Dist_ChronoBTv3, augmented with LSIDS solves 6 more instances while achieving a reduction of over 125 seconds in PAR-2 score, a significant improvement in the context of the SAT competition.The unstable and non-deterministic behavior of parallel SAT solvers hinders a wider adoption of parallel solvers to the practical applications.Some of the more well-known metrics to identify high-quality clauses for sharing include clause length, literal block distance (LBD), and clause usage in propagation.", "title_summ": "Comparing Integer Linear Programming to SAT-Solving for Hard Problems in Computational and Systems BiologySolving Bitvectors with MCSAT: Explanations from Bits and PiecesSynthesis for Multi-weighted Games with Branching-Time Winning ConditionsDesigning New Phase Selection HeuristicsCommunity and LBD-Based Clause Sharing Policy for Parallel SAT SolvingTrail Saving on BacktrackClause Size Reduction with all-UIP LearningSorting Parity Encodings by Reusing VariablesImproving Implementation of SAT Competitions 2017\u20132019 WinnersOn the Effect of Learned Clauses on Stochastic Local SearchReproducible Efficient Parallel SAT SolvingOn Weakening Strategies for PB SolversIncremental Encoding of Pseudo-Boolean Goal Functions Based on Comparator NetworksTowards a Better Understanding of (Partial Weighted) MaxSAT Proof SystemsTaming High Treewidth with Abstraction, Nested Dynamic Programming, and Database TechnologySpeeding up Quantified Bit-Vector SMT Solvers by Bit-Width Reductions and ExtensionsAbstract Cores in ImplicitHitting Set MaxSat SolvingTowards a Complexity-Theoretic Understanding of Restarts in SAT SolversSAT-Based Encodings for Optimal Decision Trees with Explicit PathsA Lower Bound on DNNF Encodings of Pseudo-Boolean ConstraintsFractional Types: Expressive and Safe Space Management for Ancilla Bits", "title_abstract_phrases": "Clause Size Reduction with all-UIP LearningAlmost all CDCL SAT solvers use the 1-UIP clause learning scheme for learning new clauses from conflicts, and our current understanding of SAT solving provides good reasons for using that scheme.Trail Saving on BacktrackA CDCL SAT solver can backtrack a large distance when it learns a new clause, e.g, when the new learnt clause is a unit clause the solver has to backtrack to level zero.The unstable and non-deterministic behavior of parallel SAT solvers hinders a wider adoption of parallel solvers to the practical applications.The size of our refutations of reordered parity formulas is [Formula: see text].Improving Implementation of SAT Competitions 2017\u20132019 WinnersThe results of annual SAT competitions are often viewed as the milestones showcasing the progress in SAT solvers.The experimental results show that our reproducible parallel SAT solver has comparable performance to non-deterministic parallel SAT solvers even in a many-core environment."}